/* Name:   Austin Johnson
   Login:  agjohns
   Course: ECE2230
   Assgn#: MP2
   Purpose: A sequence of tests to run as standard input for the sequential list ADT. Each test is designed to 
	      try to "break" the program in any way that it can. Tests 1-12 test the unsorted list, Tests 13-22 
	      test the sorted list, and Test 23 exits the program. 
   Assumptions: This testplan should work with no errors as long as the input commands are correct -> i.e if you 
		  INSERT id and follow with 11 numbers when the structure only contains 10. 
*/


********** UNSORTED LINKED LIST TEST BEGIN **********


TEST 1: Testing to see if able to erase, print or use at on an empty list.

erase 0
print
at 0


THEORETICAL RESULTS: The program should print that 0 is an invalid position to erase. It should also print that the 
		       list is empty. Lastly it should print that 0 is an invalid postion because there is nothing
		       stored at that position.

ACTUAL RESULTS:





TEST 2: Testing if able to insert into an invalid position. 

insert -1 
687
-1
-1
-1
-1
-1
-1
-1
-1
-1


THEORETICAL RESULTS: The program should reject the insert as an invalid position. 

ACTUAL RESULTS:





TEST 3: Testing if entries are inserted and the number of entries increments.

stats
insert 0
985
0
0
0
0
0
0
0
0
0
insert 1
366
1
1
1
1
1
1
1
1
1
stats


THEORETICAL RESULTS: The program should display that there are currently 0 records. It should then insert id 985 
		       into position 0 and id 366 into position 1 properly and then display that there are 2 records
		       in the unsorted list and 0 records in the sorted list. 
 
ACTUAL RESULTS: 





TEST 4: Testing if inserting an entry greater than the number entries places it at the end of the list.  
 
insert 2
423
2
2
2
2
2
2
2
2
2
insert 3
234
3
3
3
3
3
3
3
3
3
insert 5
452
5
5
5
5
5
5
5
5
5


THEORETICAL RESULTS: The program should insert id 423 into position 2 and id 234 into position 3. It should then insert id 452 into position 4 
		       although it will display that it inserted it into position 5. It displays this because I did not mess with the output of 
		       the print statements in the lab2.c file per the mp2 instructions.  

ACTUAL RESULTS: 





TEST 5: Testing if a record is replaced.

at 0
replace 0
634
4
4
4
4
4
4
4
4
4
at 0


THEORETICAL RESULTS: The program should display the socket info (socket id 985) currently at position 0. Next it should 
		       replace position 0 with the new info (socket id 634) and display it.  

ACTUAL RESULTS:





TEST 6: Testing if a record is erased and that the number of entries decrements.

stats
erase 3
at 3
stats


THEORETICAL RESULTS: The program should display that the number of unsorted records is 5 and sorted records is 0. It should then 
		       erase id 234 at position 3. Next it should display the socket (id 452) at position 3 to ensure proper deletion. 
	               It should then display that there are 4 records in the unsorted list and 0 records in the sorted list.  

ACTUAL RESULTS:





TEST 7: Testing pushback functionality

back
pushback
587
5
5
5
5
5
5
5
5
5
back


THEORETICAL RESULTS: The program should display the last record's information (id 452). It should then push the new record (id 587)
		       onto the end of the list and display the record at the end of the list to make sure it inserted properly. 

ACTUAL RESULTS:





TEST 8: Testing popback functionality

back
popback
back


THEORETICAL RESULTS: The program should display the last record's information (id 587). It should then pop that record from the list and 
		       display the updated end of the list's record (id 452).

ACTUAL RESULTS: 





TEST 9: Testing all of the various print commands

front
at 0
back
at 3
print


THEORETICAL RESULTS: The program should display the front of the list's socket information (id 634) using the front command. It 
		       should also display this same information when the at 0 command is run. Next it should display the back of the 
		       list's socket information (id 452) using the back command. It should also display this same information when 
		       the at 3 command is run. Lastly, it should print all of the current records (id 634, id 366, id 423, id 452).

ACTUAL RESULTS: 





TEST 10: Testing the "shift" functionality of the insert command 

insert 0
686
6
6
6
6
6
6
6
6
6
insert 3
712
7
7
7
7
7
7
7
7
7
front
at 4
back


THEORETICAL RESULTS: The program should insert id 686 into position 0 and "shift" the socket that was previously in position 0 (id 634)
		       to position 1. It should then insert id 712 into position 3 and "shift" id 423 to position 4. It should then print 
		       the front of the list (id 686), position 4 (id 423), and the back of the list (id 452) to verify proper shifting of records.

ACTUAL RESULTS:





TEST 11: Testing the "shift" functionality of the erase command

insert 1
109
1
1
1
1
1
1
1
1
1
insert 2
723
2
2
2
2
2
2
2
2
2
insert 4
441
3
3
3
3
3
3
3
3
3
front
erase 0
front
at 8
at 2
print


THEORETICAL RESULTS: The program should insert id 109 into position 1, id 723 into position 2, and id 441 into position 4 properly. It should 
		       then display the first record (id 686) in the list. Next it should erase the first record and "shift" all remaining records 
		       to the left one position. Next it should print the new front of the list (id 109). Next it should try to display information 
	   	       at position 8 but fail because the record at position 8 was moved to position 7. Lastly it should display the information 
	               at position 2 (id 634) to verify proper "shifting".

ACTUAL RESULTS:





TEST 12: STRESS TEST  


insert 1
123
1
1
1
1
1
1
1
1
1
insert 4
494
4
4
4
4
4
4
4
4
4
insert 3
300
3
3
3
3
3
3
3
3
3
insert 5
500
5
5
5
5
5
5
5
5
5
insert 2
292
2
2
2
2
2
2
2
2
2
insert 7
707
7
7
7
7
7
7
7
7
7
insert 8
812
8
8
8
8
8
8
8
8
8
insert 6
665
6
6
6
6
6
6
6
6
6
insert 9
990
9
9
9
9
9
9
9
9
9
insert 11
114
11
11
11
11
11
11
11
11
11
insert 10
109
10
10
10
10
10
10
10
10
10
insert 12
122
12
12
12
12
12
12
12
12
12
insert 14
141
14
14
14
14
14
14
14
14
14
insert 13
133
13
13
13
13
13
13
13
13
13
print
popback
popback
popback
popback
popback
popback
popback
popback
popback
popback
stats
pushback
158
15
15
15
15
15
15
15
15
15
pushback
169
16
16
16
16
16
16
16
16
16
pushback
171
17
17
17
17
17
17
17
17
17
pushback
180
18
18
18
18
18
18
18
18
18
pushback
112
19
19
19
19
19
19
19
19
19
pushback
202
20
20
20
20
20
20
20
20
20
pushback
218
21
21
21
21
21
21
21
21
21
pushback
221
22
22
22
22
22
22
22
22
22
pushback
235
23
23
23
23
23
23
23
23
23
pushback
248
24
24
24
24
24
24
24
24
24
stats
print
at 0
back
erase 0
insert -1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
at -1
erase 0
erase 7
erase 1
erase 4
erase 10
erase 16
erase 10
popback
popback
popback
popback
erase 5
erase 4
popback
stats
front
back
print


THEORETICAL RESULTS: The program should insert positions 1 - 14 properly and print all of the records in the unsorted list (should be 22).
		       Next it should popback 10 times and display that there are 12 records in the unsorted list and 0 in the sorted list. 
		       Next it should pushback 10 times and display that there are 22 records in the unsorted list and 0 in the sorted list. 
		       Next it should print all of the current records, the first record (id 109) and the back record (id 248). Next it should 
		       erase at position 0 and attempt to insert and display at position -1 but fail. Next it should erase at positions 0,7,1,
		       4,10 and try to erase at position 16 but it should print invalid position. Next it should erase at 10 and popback 4 times. 
		       Next it should erase at positions 5 and 4 and popback the last record. Lastly it should display the stats (should be 8 
		       records in the unsorted list and 0 in the sorted, front of the list (id 292), back of the list (id 171) and finally print 
		       all of the current records: 292, 300, 634, 665, 812, 158, 169, and 171.    

ACTUAL RESULTS:





********** UNSORTED LINKED LIST TEST BEGIN **********


TEST 13: Testing to see if able to REMOVE, PRINT or LOOK on an empty list.

REMOVE 001
PRINT
LOOK 001


THEORETICAL RESULTS: The program should print that it did not remove 1. It should also print that the 
		       list is empty. Lastly it should print that it did not find 1 because there is 
		       nothing stored with that ID.

ACTUAL RESULTS:





TEST 14: Testing if able to UPDATE an ID that isn't stored.

UPDATE 342
12
76
23
4
2
76
24
123
5


THEORETICAL RESULTS: The program should display that it didn't update ID 342 because it doesn't exist. 

ACTUAL RESULTS:





TEST 15: Testing if entries are inserted properly and the number of entries increments.

stats
INSERT 123
1
1
1
2
2
2
3
3
3
INSERT 456
4
4
4
5
5
5
6
6
6
stats


THEORETICAL RESULTS: The program should display that there are 8 records in the unsorted list and 0 records
		       in the sorted list. It should then INSERT 123 and 456 and display that there are 8 
		       records in the unsorted list and 2 records in the sorted list. 
 
ACTUAL RESULTS: 





TEST 16: Testing if entries are organize by ascending order of IDs.

INSERT 124
2
36
43
3
7
3
2
87
3
INSERT 883
7
8
11
43
15
2
64
2
4
PRINT

THEORETICAL RESULTS: The program should INSERT 124 and 883 into their correct locations. It should then PRINT the sorted list
		       with IDs 123, 124, 456, and 883. 
 
ACTUAL RESULTS: 





TEST 17: Testing the LOOK and UPDATE command. 

LOOK 124
UPDATE 124
88
88
88
88
88
88
88
88
88
LOOK 124

THEORETICAL RESULTS: The program should display the current information of id 124. It should then UPDATE id 124 to 
		       include information with all 88's and should print the old and updated version.  
 
ACTUAL RESULTS: 





TEST 18: Testing placement if INSERT an ID that already exists.  

PRINT
INSERT 456
31
654
33
2
7
47
12
3
9
PRINT

THEORETICAL RESULTS: The program should PRINT the records in the sorted list. It should then INSERT id 456. Next it
		       should PRINT the new list to make sure it placed new id 456 after the old id 456.   
 
ACTUAL RESULTS: 





TEST 19: Testing if a record is REMOVED and that the number of entries decrements.

stats
REMOVE 124
LOOK 124
stats


THEORETICAL RESULTS: The program should display that the number of unsorted records is 8 and sorted records is 5. It should then 
		       REMOVE id 124. Next it try to LOOK for id 124 but should fail to find it. Lastly it should display that 
	               there are 8 records in the unsorted list and 4 records in the sorted list.  

ACTUAL RESULTS:





TEST 20: Testing UPDATE if multiple IDs match

PRINT
UPDATE 456
66
66
66
66
66
66
66
66
66
PRINT


THEORETICAL RESULTS: The program should PRINT the list of sorted records. It should then UPDATE the first match with id 456 
		       with information containing all 66s. It should then PRINT the list of sorted records to ensure first 
		       id was updated properly. 

ACTUAL RESULTS:




TEST 21: Testing REMOVE if multiple IDs match

PRINT
REMOVE 456
LOOK 456
PRINT


THEORETICAL RESULTS: The program should PRINT the list of sorted records. It should then REMOVE the first match with id 456. 
	   	       Next it should LOOK for id 456 and find the other match with id 456. Lastly it should PRINT the list 
		       of sorted records to ensure proper deletion. 

ACTUAL RESULTS:





TEST 22: STRESS TEST

INSERT 754
12
43
635
23
565
34
745
3
54
INSERT 555
11
11
11
11
11
11
11
11
11
INSERT 112
99
34
90
245
634
78
5
68
1
INSERT 398
23
98
54
8
3
532
67
54
6
INSERT 907
9
0
2
4
535
43
53
2
4
INSERT 002
93
3
0
98
23
5
345
6
89
INSERT 114
35
3436
74
25
7
4
7453
5
3
INSERT 637
65
43
67
3
67
4
3
56
7
INSERT 567
00
634
2
5
7
3
33
57
3
INSERT 755
3
89
444
33
45
2
5
7
33
INSERT 555
23
7456
24
325
6
35
2
47
4
INSERT 555 
45
234
7
3
45
7
234
4
12
INSERT 001
12
423
63
6
3
6
7
453
1
INSERT 1000
542
7
3
423
686
34
2
46
7
stats
LOOK 555
UPDATE 555
22
22
22
22
22
22
22
22
22
22
LOOK 555
REMOVE 002
REMOVE 567
REMOVE 398
REMOVE 555
REMOVE 1000
REMOVE -1
REMOVE 222
REMOVE 555
REMOVE 114
PRINT
INSERT 003
42
56
13
77
777
22
3
533
6
INSERT 2021
543
76
23
88
3
65
0
222
1
INSERT 40
31
34
436
24
7
23
32
2
9
LOOK 907
REMOVE 907
LOOK 907
LOOK 112
LOOK 637
REMOVE 003
PRINT


THEORETICAL RESULTS: The program should INSERT 14 different IDs and place them in ascending order. It should display that there
		       are 8 records in the unsorted list and 17 in the sorted list. Next it should LOOK for the first record 
		       that matches id 555 (should find one containing all 11's). Next it should UPDATE id 555 from 11's to 22's. 
		       It should then LOOK for id 555 to make sure it updated. It should then REMOVE 002, 567, 398, 555, and 1000. 
                       It should try to REMOVE -1 and 222 but should fail. Next it should REMOVE 555 and 114. It should then PRINT 
		       the list (should contain 10 records). Next it should INSERT 003, 2021, and 40. It should LOOK for 907, REMOVE 907, 
		       and then try to LOOK for it again but fail. It should then LOOK for 112 and 637 and find them in the list. Lastly, 
		       it should REMOVE 003 and PRINT the list which should contain 11 records in ascending order.  

ACTUAL RESULTS:





TEST 23: Testing the quit command


THEORETICAL RESULTS: The program should display "Goodbye" and then exit (below this comment block).

ACTUAL RESULTS: 

*NOTE: To verify TEST 23, run with valgrind and confirm that there are no memory leaks 
	 valgrind --leak-check=full ./lab1 < testplan


quit
