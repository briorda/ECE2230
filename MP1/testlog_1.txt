Welcome to lab1.
# /* Name:   Austin Johnson
#    Login:  agjohns
#    Course: ECE2230
#    Assgn#: MP1
#    Purpose: A sequence of tests to run as standard input for the sequential list ADT. Each test is designed to 
# 	      try to "break" the program in any way that it can.
#    Assumptions: These tests are designed with MINSOCKETS set to 4.
# */
# 
# 
# TEST 1: Testing to see if able to erase, print or use at on an empty list.
# 
Did not remove: invalid position 0
List empty
Did not print: invalid position 0
# 
# 
# THEORETICAL RESULTS: The program should print that 0 is an invalid position to erase. It should also print that the 
# 		       list is empty. Lastly it should print that 0 is an invalid postion because there is nothing
# 		       stored at that position.
# 
# ACTUAL RESULTS: Passed the test. 
# 
# 
# 
# TEST 2: Testing if able to insert into an invalid position. 
# 
Socket ID:Dest IP address:Source IP address:Dest port number:Source port number:protocol (TCP|UDP|SSL|RTP):address family (IPv4|IPv6):state (EST|CLOSE_WAIT|CLOSED):data rate:Time received (int):
Rejected: 687 invalid position -1
# 
# 
# THEORETICAL RESULTS: The program should reject the insert as an invalid position. 
# 
# ACTUAL RESULTS: Passed the test. 
# 
# 
# 
# TEST 3: Testing if entries are inserted and the number of entries increments.
# 
Number records: 0, Current capacity: 4
Socket ID:Dest IP address:Source IP address:Dest port number:Source port number:protocol (TCP|UDP|SSL|RTP):address family (IPv4|IPv6):state (EST|CLOSE_WAIT|CLOSED):data rate:Time received (int):
Inserted: 985 into position 0
Socket ID:Dest IP address:Source IP address:Dest port number:Source port number:protocol (TCP|UDP|SSL|RTP):address family (IPv4|IPv6):state (EST|CLOSE_WAIT|CLOSED):data rate:Time received (int):
Inserted: 366 into position 1
Number records: 2, Current capacity: 4
# 
# 
# THEORETICAL RESULTS: The program should display that there are currently 0 records with a capacity equal to MINSOCKETS 
# 		       (in this case it's equal to 4). It should then insert id 985 into position 0 and id 366 into position 1 
# 		       properly and then display that there are 2 records with a capacity equal to 4.
#  
# ACTUAL RESULTS: Passed the test. 
# 
# 
# 
# TEST 4: Testing if entries are inserted properly and in sequential order. 
#  
Socket ID:Dest IP address:Source IP address:Dest port number:Source port number:protocol (TCP|UDP|SSL|RTP):address family (IPv4|IPv6):state (EST|CLOSE_WAIT|CLOSED):data rate:Time received (int):
Inserted: 423 into position 2
Socket ID:Dest IP address:Source IP address:Dest port number:Source port number:protocol (TCP|UDP|SSL|RTP):address family (IPv4|IPv6):state (EST|CLOSE_WAIT|CLOSED):data rate:Time received (int):
Inserted: 234 into position 3
Socket ID:Dest IP address:Source IP address:Dest port number:Source port number:protocol (TCP|UDP|SSL|RTP):address family (IPv4|IPv6):state (EST|CLOSE_WAIT|CLOSED):data rate:Time received (int):
Rejected: 452 invalid position 5
# 
# 
# THEORETICAL RESULTS: The program should insert id 423 into position 2 and id 234 into position 3 and reject insert id 452 into position 5
# 		       as an invalid position.  
# 
# ACTUAL RESULTS: Passed the test. 
# 
# 
# 
# TEST 5: Testing if a record is replaced.
# 
Record at position: 0
Socket id: 985 Dest: 0, Src: 0, Dport: 0, Src: 0, Prot: 0, Fam: 0, St: 0 Rt: 0
 Tm: 0
Socket ID:Dest IP address:Source IP address:Dest port number:Source port number:protocol (TCP|UDP|SSL|RTP):address family (IPv4|IPv6):state (EST|CLOSE_WAIT|CLOSED):data rate:Time received (int):
Replaced: 985 with 634 into position 0
Record at position: 0
Socket id: 634 Dest: 4, Src: 4, Dport: 4, Src: 4, Prot: 4, Fam: 4, St: 4 Rt: 4
 Tm: 4
# 
# 
# THEORETICAL RESULTS: The program should display the socket info (socket id 985) currently at position 0. Next it should 
# 		       replace position 0 with the new info (socket id 634) and display it.  
# 
# ACTUAL RESULTS: Passed the test. 
# 
# 
# 
# TEST 6: Testing if a record is erased and that the number of entries decrements.
# 
Number records: 4, Current capacity: 4
Erased: 234 from position 3
Did not print: invalid position 3
Number records: 3, Current capacity: 4
# 
# 
# THEORETICAL RESULTS: The program should display that the current number of records is 4 with a capacity of 4. It should then erase 
# 		       id 234 at position 3. Next it should try to display socket 3 but should fail because there is nothing to 
# 		       display at that position. It should then display that there are 3 records with a capacity of 4. 
# 
# ACTUAL RESULTS: Passed the test. 
# 
# 
# 
# TEST 7: Testing pushback functionality
# 
Record at back:
Socket id: 423 Dest: 2, Src: 2, Dport: 2, Src: 2, Prot: 2, Fam: 2, St: 2 Rt: 2
 Tm: 2
Socket ID:Dest IP address:Source IP address:Dest port number:Source port number:protocol (TCP|UDP|SSL|RTP):address family (IPv4|IPv6):state (EST|CLOSE_WAIT|CLOSED):data rate:Time received (int):
Pushed: 587 into position 3
Record at back:
Socket id: 587 Dest: 5, Src: 5, Dport: 5, Src: 5, Prot: 5, Fam: 5, St: 5 Rt: 5
 Tm: 5
# 
# 
# THEORETICAL RESULTS: The program should display the last record's information (id 423). It should then push the new record (id 587)
# 		       onto the end of the list and display the record at the end of the list to make sure it inserted properly. 
# 
# ACTUAL RESULTS: Passed the test. 
# 
# 
# 
# TEST 8: Testing popback functionality
# 
Record at back:
Socket id: 587 Dest: 5, Src: 5, Dport: 5, Src: 5, Prot: 5, Fam: 5, St: 5 Rt: 5
 Tm: 5
Popped: 587 from position 3
Record at back:
Socket id: 423 Dest: 2, Src: 2, Dport: 2, Src: 2, Prot: 2, Fam: 2, St: 2 Rt: 2
 Tm: 2
# 
# 
# THEORETICAL RESULTS: The program should display the last record's information (id 587). It should then pop that record from the list and 
# 		       display the updated end of the list's record (id 423).
# 
# ACTUAL RESULTS: Passed the test. 
# 
# 
# 
# TEST 9: Testing all of the various print commands
# 
Record at front:
Socket id: 634 Dest: 4, Src: 4, Dport: 4, Src: 4, Prot: 4, Fam: 4, St: 4 Rt: 4
 Tm: 4
Record at position: 0
Socket id: 634 Dest: 4, Src: 4, Dport: 4, Src: 4, Prot: 4, Fam: 4, St: 4 Rt: 4
 Tm: 4
Record at back:
Socket id: 423 Dest: 2, Src: 2, Dport: 2, Src: 2, Prot: 2, Fam: 2, St: 2 Rt: 2
 Tm: 2
Record at position: 2
Socket id: 423 Dest: 2, Src: 2, Dport: 2, Src: 2, Prot: 2, Fam: 2, St: 2 Rt: 2
 Tm: 2
3 records
   0: Socket id: 634 Dest: 4, Src: 4, Dport: 4, Src: 4, Prot: 4, Fam: 4, St: 4 Rt: 4
 Tm: 4
   1: Socket id: 366 Dest: 1, Src: 1, Dport: 1, Src: 1, Prot: 1, Fam: 1, St: 1 Rt: 1
 Tm: 1
   2: Socket id: 423 Dest: 2, Src: 2, Dport: 2, Src: 2, Prot: 2, Fam: 2, St: 2 Rt: 2
 Tm: 2
# 
# 
# THEORETICAL RESULTS: The program should display the front of the list's socket information (id 634) using the front command. It 
# 		       should also display this same information when the at 0 command is run. Next it should display the back of the 
# 		       list's socket information (id 423) using the back command. It should also display this same information when 
# 		       the at 2 command is run. Lastly, it should print all of the current records (id 634, id 366, id 423).
# 
# ACTUAL RESULTS: Passed the test. 
# 
# 
# 
# TEST 10: Testing to see if the capacity of the records doubles if it cannot accomodate another record
# 
Socket ID:Dest IP address:Source IP address:Dest port number:Source port number:protocol (TCP|UDP|SSL|RTP):address family (IPv4|IPv6):state (EST|CLOSE_WAIT|CLOSED):data rate:Time received (int):
Inserted: 586 into position 3
Number records: 4, Current capacity: 4
Socket ID:Dest IP address:Source IP address:Dest port number:Source port number:protocol (TCP|UDP|SSL|RTP):address family (IPv4|IPv6):state (EST|CLOSE_WAIT|CLOSED):data rate:Time received (int):
Inserted: 112 into position 4
Number records: 5, Current capacity: 8
# 
# 
# THEORETICAL RESULTS: The program should insert id 586 into position 3 properly. It should display that there are 4 records with a capacity of 4. 
# 		       It should NOT double at this time because it has not tried to accomodate another record. It should then insert id 112 into
# 		       position 4 properly. The capacity should double and it should display that there are 5 records with a capacity of 8.
# 
# ACTUAL RESULTS: Passed the test. 
# 
# 
# 
# TEST 11: Testing to see if array is resized to half its current value when remaining records is less than one-fourth the array size
# 
Erased: 112 from position 4
Erased: 586 from position 3
Number records: 3, Current capacity: 8
Erased: 423 from position 2
Number records: 2, Current capacity: 8
Erased: 366 from position 1
Number records: 1, Current capacity: 4
# 
# 
# THEORETICAL RESULTS: The program should erase records at positions 4 and 3 properly. It should then display that there are 3 records 
# 		       with a capacity of 8. It should then erase 2 properly. It should then display that there are 2 records with a capacity 
# 		       of 8. It should NOT half at this time because the remaining records are not LESS THAN one-fourth the capacity. It should 
# 		       then erase 1 properly. The capacity should now half and it should display that there is 1 record with a capacity of 4.  
# 
# ACTUAL RESULTS: Passed the test.
# 
# 
# 
# TEST 12: Testing the shift functionality of the insert command
# 
Socket ID:Dest IP address:Source IP address:Dest port number:Source port number:protocol (TCP|UDP|SSL|RTP):address family (IPv4|IPv6):state (EST|CLOSE_WAIT|CLOSED):data rate:Time received (int):
Inserted: 686 into position 0
Socket ID:Dest IP address:Source IP address:Dest port number:Source port number:protocol (TCP|UDP|SSL|RTP):address family (IPv4|IPv6):state (EST|CLOSE_WAIT|CLOSED):data rate:Time received (int):
Inserted: 712 into position 0
Record at front:
Socket id: 712 Dest: 7, Src: 7, Dport: 7, Src: 7, Prot: 7, Fam: 7, St: 7 Rt: 7
 Tm: 7
Record at position: 1
Socket id: 686 Dest: 6, Src: 6, Dport: 6, Src: 6, Prot: 6, Fam: 6, St: 6 Rt: 6
 Tm: 6
Record at back:
Socket id: 634 Dest: 4, Src: 4, Dport: 4, Src: 4, Prot: 4, Fam: 4, St: 4 Rt: 4
 Tm: 4
# 
# 
# THEORETICAL RESULTS: The program should insert id 686 into position 0 and shift the socket that was previously in position 0 (id 634)
# 		       to position 1. It should then insert id 712 into position 0 and shift the other records (id 686 and id 634) to 
# 		       the next positions. It should then print the front of the list (id 712), middle of the list (id 686), and the back
# 		       of the list (id 634) to verify proper shifting of records.
# 
# ACTUAL RESULTS: Passed the test. 
# 
# 
#  
# TEST 13: Testing to see if array is reset to MINSOCKETS when remaining records is less than one-fourth the array size and MINSOCKETS is larger 
# 	   than half of capacity.
# 
Erased: 634 from position 2
Number records: 2, Current capacity: 4
Erased: 686 from position 1
Number records: 1, Current capacity: 4
# 
# 
# THEORETICAL RESULTS: The program should erase position 2 properly and then display that there are 2 records with a capacity of 4. It should then 
# 		       erase position 1 properly. It should display that there is 1 record with a capacity of 4. The capacity is still 4 because 
# 		       half of 4 is 2 which is less than MINSOCKETS so the array is reset to MINSOCKETS.
# 
# ACTUAL RESULTS: Passed the test. 
# 
# 
# 
# TEST 14: Testing the shift functionality of the erase command
# 
Socket ID:Dest IP address:Source IP address:Dest port number:Source port number:protocol (TCP|UDP|SSL|RTP):address family (IPv4|IPv6):state (EST|CLOSE_WAIT|CLOSED):data rate:Time received (int):
Inserted: 109 into position 1
Socket ID:Dest IP address:Source IP address:Dest port number:Source port number:protocol (TCP|UDP|SSL|RTP):address family (IPv4|IPv6):state (EST|CLOSE_WAIT|CLOSED):data rate:Time received (int):
Inserted: 723 into position 2
Socket ID:Dest IP address:Source IP address:Dest port number:Source port number:protocol (TCP|UDP|SSL|RTP):address family (IPv4|IPv6):state (EST|CLOSE_WAIT|CLOSED):data rate:Time received (int):
Inserted: 441 into position 3
Record at front:
Socket id: 712 Dest: 7, Src: 7, Dport: 7, Src: 7, Prot: 7, Fam: 7, St: 7 Rt: 7
 Tm: 7
Erased: 712 from position 0
Record at front:
Socket id: 109 Dest: 1, Src: 1, Dport: 1, Src: 1, Prot: 1, Fam: 1, St: 1 Rt: 1
 Tm: 1
Did not print: invalid position 3
Record at position: 2
Socket id: 441 Dest: 3, Src: 3, Dport: 3, Src: 3, Prot: 3, Fam: 3, St: 3 Rt: 3
 Tm: 3
# 
# 
# THEORETICAL RESULTS: The program should insert id 109 into position 1, id 723 into position 2, and id 441 into position 3 properly. It should 
# 		       then display the first record (id 712) in the list. Next it should erase the first record and shift all remaining records 
# 		       to the left one position. Next it should print the new front of the list (id 109). Next it should try to display information 
# 	   	       at position 3 but fail because the record at position 3 was moved to position 2. Lastly it should display the information 
# 	               at position 2 (id 441) to verify proper shifting.
# 
# ACTUAL RESULTS: Passed the test.
# 
# 
# 
# TEST 15: STRESS TEST  
# 
# 
Socket ID:Dest IP address:Source IP address:Dest port number:Source port number:protocol (TCP|UDP|SSL|RTP):address family (IPv4|IPv6):state (EST|CLOSE_WAIT|CLOSED):data rate:Time received (int):
Inserted: 123 into position 1
Socket ID:Dest IP address:Source IP address:Dest port number:Source port number:protocol (TCP|UDP|SSL|RTP):address family (IPv4|IPv6):state (EST|CLOSE_WAIT|CLOSED):data rate:Time received (int):
Inserted: 494 into position 4
Number records: 5, Current capacity: 8
Socket ID:Dest IP address:Source IP address:Dest port number:Source port number:protocol (TCP|UDP|SSL|RTP):address family (IPv4|IPv6):state (EST|CLOSE_WAIT|CLOSED):data rate:Time received (int):
Inserted: 300 into position 3
Socket ID:Dest IP address:Source IP address:Dest port number:Source port number:protocol (TCP|UDP|SSL|RTP):address family (IPv4|IPv6):state (EST|CLOSE_WAIT|CLOSED):data rate:Time received (int):
Inserted: 500 into position 5
Socket ID:Dest IP address:Source IP address:Dest port number:Source port number:protocol (TCP|UDP|SSL|RTP):address family (IPv4|IPv6):state (EST|CLOSE_WAIT|CLOSED):data rate:Time received (int):
Inserted: 292 into position 2
Socket ID:Dest IP address:Source IP address:Dest port number:Source port number:protocol (TCP|UDP|SSL|RTP):address family (IPv4|IPv6):state (EST|CLOSE_WAIT|CLOSED):data rate:Time received (int):
Inserted: 707 into position 7
Number records: 9, Current capacity: 16
Socket ID:Dest IP address:Source IP address:Dest port number:Source port number:protocol (TCP|UDP|SSL|RTP):address family (IPv4|IPv6):state (EST|CLOSE_WAIT|CLOSED):data rate:Time received (int):
Inserted: 812 into position 8
Socket ID:Dest IP address:Source IP address:Dest port number:Source port number:protocol (TCP|UDP|SSL|RTP):address family (IPv4|IPv6):state (EST|CLOSE_WAIT|CLOSED):data rate:Time received (int):
Inserted: 665 into position 6
Socket ID:Dest IP address:Source IP address:Dest port number:Source port number:protocol (TCP|UDP|SSL|RTP):address family (IPv4|IPv6):state (EST|CLOSE_WAIT|CLOSED):data rate:Time received (int):
Inserted: 990 into position 9
Socket ID:Dest IP address:Source IP address:Dest port number:Source port number:protocol (TCP|UDP|SSL|RTP):address family (IPv4|IPv6):state (EST|CLOSE_WAIT|CLOSED):data rate:Time received (int):
Inserted: 114 into position 11
Socket ID:Dest IP address:Source IP address:Dest port number:Source port number:protocol (TCP|UDP|SSL|RTP):address family (IPv4|IPv6):state (EST|CLOSE_WAIT|CLOSED):data rate:Time received (int):
Inserted: 109 into position 10
Socket ID:Dest IP address:Source IP address:Dest port number:Source port number:protocol (TCP|UDP|SSL|RTP):address family (IPv4|IPv6):state (EST|CLOSE_WAIT|CLOSED):data rate:Time received (int):
Inserted: 122 into position 12
Socket ID:Dest IP address:Source IP address:Dest port number:Source port number:protocol (TCP|UDP|SSL|RTP):address family (IPv4|IPv6):state (EST|CLOSE_WAIT|CLOSED):data rate:Time received (int):
Inserted: 141 into position 14
Socket ID:Dest IP address:Source IP address:Dest port number:Source port number:protocol (TCP|UDP|SSL|RTP):address family (IPv4|IPv6):state (EST|CLOSE_WAIT|CLOSED):data rate:Time received (int):
Inserted: 133 into position 13
Number records: 17, Current capacity: 32
Popped: 494 from position 16
Popped: 141 from position 15
Popped: 114 from position 14
Popped: 133 from position 13
Popped: 122 from position 12
Popped: 812 from position 11
Popped: 109 from position 10
Popped: 990 from position 9
Popped: 707 from position 8
Popped: 500 from position 7
Number records: 7, Current capacity: 16
Socket ID:Dest IP address:Source IP address:Dest port number:Source port number:protocol (TCP|UDP|SSL|RTP):address family (IPv4|IPv6):state (EST|CLOSE_WAIT|CLOSED):data rate:Time received (int):
Pushed: 158 into position 7
Socket ID:Dest IP address:Source IP address:Dest port number:Source port number:protocol (TCP|UDP|SSL|RTP):address family (IPv4|IPv6):state (EST|CLOSE_WAIT|CLOSED):data rate:Time received (int):
Pushed: 169 into position 8
Socket ID:Dest IP address:Source IP address:Dest port number:Source port number:protocol (TCP|UDP|SSL|RTP):address family (IPv4|IPv6):state (EST|CLOSE_WAIT|CLOSED):data rate:Time received (int):
Pushed: 171 into position 9
Socket ID:Dest IP address:Source IP address:Dest port number:Source port number:protocol (TCP|UDP|SSL|RTP):address family (IPv4|IPv6):state (EST|CLOSE_WAIT|CLOSED):data rate:Time received (int):
Pushed: 180 into position 10
Socket ID:Dest IP address:Source IP address:Dest port number:Source port number:protocol (TCP|UDP|SSL|RTP):address family (IPv4|IPv6):state (EST|CLOSE_WAIT|CLOSED):data rate:Time received (int):
Pushed: 112 into position 11
Socket ID:Dest IP address:Source IP address:Dest port number:Source port number:protocol (TCP|UDP|SSL|RTP):address family (IPv4|IPv6):state (EST|CLOSE_WAIT|CLOSED):data rate:Time received (int):
Pushed: 202 into position 12
Socket ID:Dest IP address:Source IP address:Dest port number:Source port number:protocol (TCP|UDP|SSL|RTP):address family (IPv4|IPv6):state (EST|CLOSE_WAIT|CLOSED):data rate:Time received (int):
Pushed: 218 into position 13
Socket ID:Dest IP address:Source IP address:Dest port number:Source port number:protocol (TCP|UDP|SSL|RTP):address family (IPv4|IPv6):state (EST|CLOSE_WAIT|CLOSED):data rate:Time received (int):
Pushed: 221 into position 14
Socket ID:Dest IP address:Source IP address:Dest port number:Source port number:protocol (TCP|UDP|SSL|RTP):address family (IPv4|IPv6):state (EST|CLOSE_WAIT|CLOSED):data rate:Time received (int):
Pushed: 235 into position 15
Socket ID:Dest IP address:Source IP address:Dest port number:Source port number:protocol (TCP|UDP|SSL|RTP):address family (IPv4|IPv6):state (EST|CLOSE_WAIT|CLOSED):data rate:Time received (int):
Pushed: 248 into position 16
Number records: 17, Current capacity: 32
17 records
   0: Socket id: 109 Dest: 1, Src: 1, Dport: 1, Src: 1, Prot: 1, Fam: 1, St: 1 Rt: 1
 Tm: 1
   1: Socket id: 123 Dest: 1, Src: 1, Dport: 1, Src: 1, Prot: 1, Fam: 1, St: 1 Rt: 1
 Tm: 1
   2: Socket id: 292 Dest: 2, Src: 2, Dport: 2, Src: 2, Prot: 2, Fam: 2, St: 2 Rt: 2
 Tm: 2
   3: Socket id: 723 Dest: 2, Src: 2, Dport: 2, Src: 2, Prot: 2, Fam: 2, St: 2 Rt: 2
 Tm: 2
   4: Socket id: 300 Dest: 3, Src: 3, Dport: 3, Src: 3, Prot: 3, Fam: 3, St: 3 Rt: 3
 Tm: 3
   5: Socket id: 441 Dest: 3, Src: 3, Dport: 3, Src: 3, Prot: 3, Fam: 3, St: 3 Rt: 3
 Tm: 3
   6: Socket id: 665 Dest: 6, Src: 6, Dport: 6, Src: 6, Prot: 6, Fam: 6, St: 6 Rt: 6
 Tm: 6
   7: Socket id: 158 Dest: 15, Src: 15, Dport: 15, Src: 15, Prot: 15, Fam: 15, St: 15 Rt: 15
 Tm: 15
   8: Socket id: 169 Dest: 16, Src: 16, Dport: 16, Src: 16, Prot: 16, Fam: 16, St: 16 Rt: 16
 Tm: 16
   9: Socket id: 171 Dest: 17, Src: 17, Dport: 17, Src: 17, Prot: 17, Fam: 17, St: 17 Rt: 17
 Tm: 17
  10: Socket id: 180 Dest: 18, Src: 18, Dport: 18, Src: 18, Prot: 18, Fam: 18, St: 18 Rt: 18
 Tm: 18
  11: Socket id: 112 Dest: 19, Src: 19, Dport: 19, Src: 19, Prot: 19, Fam: 19, St: 19 Rt: 19
 Tm: 19
  12: Socket id: 202 Dest: 20, Src: 20, Dport: 20, Src: 20, Prot: 20, Fam: 20, St: 20 Rt: 20
 Tm: 20
  13: Socket id: 218 Dest: 21, Src: 21, Dport: 21, Src: 21, Prot: 21, Fam: 21, St: 21 Rt: 21
 Tm: 21
  14: Socket id: 221 Dest: 22, Src: 22, Dport: 22, Src: 22, Prot: 22, Fam: 22, St: 22 Rt: 22
 Tm: 22
  15: Socket id: 235 Dest: 23, Src: 23, Dport: 23, Src: 23, Prot: 23, Fam: 23, St: 23 Rt: 23
 Tm: 23
  16: Socket id: 248 Dest: 24, Src: 24, Dport: 24, Src: 24, Prot: 24, Fam: 24, St: 24 Rt: 24
 Tm: 24
Record at position: 0
Socket id: 109 Dest: 1, Src: 1, Dport: 1, Src: 1, Prot: 1, Fam: 1, St: 1 Rt: 1
 Tm: 1
Record at back:
Socket id: 248 Dest: 24, Src: 24, Dport: 24, Src: 24, Prot: 24, Fam: 24, St: 24 Rt: 24
 Tm: 24
Erased: 109 from position 0
Socket ID:Dest IP address:Source IP address:Dest port number:Source port number:protocol (TCP|UDP|SSL|RTP):address family (IPv4|IPv6):state (EST|CLOSE_WAIT|CLOSED):data rate:Time received (int):
Rejected: -1 invalid position -1
Did not print: invalid position -1
Erased: 123 from position 0
Erased: 171 from position 7
Erased: 723 from position 1
Erased: 158 from position 4
Erased: 235 from position 10
Did not remove: invalid position 11
Erased: 248 from position 10
Popped: 221 from position 9
Popped: 218 from position 8
Popped: 202 from position 7
Popped: 112 from position 6
Erased: 180 from position 5
Erased: 169 from position 4
Popped: 665 from position 3
Number records: 3, Current capacity: 8
Record at front:
Socket id: 292 Dest: 2, Src: 2, Dport: 2, Src: 2, Prot: 2, Fam: 2, St: 2 Rt: 2
 Tm: 2
Record at back:
Socket id: 441 Dest: 3, Src: 3, Dport: 3, Src: 3, Prot: 3, Fam: 3, St: 3 Rt: 3
 Tm: 3
3 records
   0: Socket id: 292 Dest: 2, Src: 2, Dport: 2, Src: 2, Prot: 2, Fam: 2, St: 2 Rt: 2
 Tm: 2
   1: Socket id: 300 Dest: 3, Src: 3, Dport: 3, Src: 3, Prot: 3, Fam: 3, St: 3 Rt: 3
 Tm: 3
   2: Socket id: 441 Dest: 3, Src: 3, Dport: 3, Src: 3, Prot: 3, Fam: 3, St: 3 Rt: 3
 Tm: 3
# 
# 
# THEORETICAL RESULTS: The program should insert positions 1 - 14 properly. It should also display the stats every time the capacity doubles.
# 		       Next it should popback 10 times and display that there are 7 records with a capacity of 16. Next it should pushback
# 		       10 times and display that there are 17 records with a capacity of 32. Next it should print all of the current records,
# 		       the first record (id 109) and the back record (id 248). Next it should erase at position 0 and attempt to insert and 
# 		       display at position -1 but fail. Next it should erase at positions 0,7,1,4,10 and try to erase at position 11 but it 
# 		       should print invalid position. Next it should erase at 10 and popback 4 times. Next it should erase at positions 5 and 
# 		       4 and popback the last record. Lastly it should display the stats (should be 3 records with a capacity of 8), front of 
# 		       the list (id 292), back of the list (id 441) and finally print all of the current records (should be 3).  
# 
# ACTUAL RESULTS: Passed the test. 
# 
# 
# 
# TEST 16: Testing the quit command
# 
# 
# 
# 
# 
# THEORETICAL RESULTS: The program should display "Goodbye" and then exit (below this comment block).
# 
# ACTUAL RESULTS: Passed the test. 
# 
# *NOTE: To verify TEST 16, run with valgrind and confirm that there are no memory leaks 
# 	 valgrind --leak-check=full ./lab1 < testplan
# 
# 
# 
# 
Goodbye
