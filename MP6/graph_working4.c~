/* graph.c template                 
 * Austin Johnson 
 * agjohns       
 * ECE 2230 Fall 2016
 * MP6
 *
 * Purpose: 
 *
 *
 *
 *
 * Assumptions: 
 *
 *
 *
 *   
 * Bugs:
 *
 *
 */

#define TRUE 1
#define FALSE 0

#include <stdlib.h>
#include <stdio.h>
#include <assert.h>
#include <limits.h>
#include <math.h>
#include "graph.h"

/*
    This function creates a graph, storing the number of vertices in the graph and
    creating an array of pointers that each point to an adjacency list that represent
    the paths that connect to a node in the graph. It returns the constructed graph.
*/
graph_t *graph_construct (int NumVertices) {
	graph_t *graph = (graph_t *) malloc(sizeof(graph_t));
	graph->NumVertices = NumVertices;
	graph->adj_list = (adj_list_t *) malloc(NumVertices * sizeof(adj_list_t));
	int i;	
	for (i = 0; i < NumVertices; i++) { 
		graph->adj_list[i].head = NULL; //initialize each adjacency list head as NULL
	}
	return graph;
}

void graph_destruct(graph_t *graph) {
    int i;
    for (i = 0; i < graph->NumVertices; i++) {
	    adj_list_node_t *N = graph->adj_list[i].head;
	    adj_list_node_t *temp = NULL;

	    while (N != NULL) {
		temp = N;
		N = N->next;
		free(temp);
	    }

	    free(N);
   }
   free(graph->adj_list);
   free(graph);
}

void adj_list_insert(adj_list_t *adj_list, int dest, int weight) { 

    //malloc space for new node and initialize values
    adj_list_node_t *new_node = (adj_list_node_t *) malloc(sizeof(adj_list_node_t)); 
    new_node->next = NULL;
    new_node->vertex = dest;
    new_node->weight = weight; 

    //empty list
    if (adj_list->head == NULL) {
        adj_list->head = new_node;
        adj_list->NumEdges = 1;
    }  

    //insert at the head of the list
    else {
        new_node->next = adj_list->head; 
        adj_list->head = new_node;
        adj_list->NumEdges += 1;
    }
    assert(adj_list != NULL);
}

void adj_list_remove(adj_list_t *adj_list, int source, int vertex) {

	if (adj_list->head == NULL) return;
	else {
		adj_list_node_t *N = adj_list->head;
		//if only one item in the list
		if (N->next == NULL) adj_list->head = NULL;
		//if node is the head
		else if (adj_list->head->vertex == vertex) adj_list->head = N->next;   
        	else {
			//find node to remove
			adj_list_node_t *prev = NULL;
			while (N->next != NULL) {
			    prev = N;
			    if (N->vertex == vertex) break;
			    N = N->next;
			}		
			prev->next = N->next;
		}
		free(N);	
	}
}

void graph_add_edge (graph_t *graph, int link_src, int link_dest, int link_weight) {

	//get the adjacency list of the source
	adj_list_t *source_list = graph->adj_list + link_src;

	//insert destination into the source list
	adj_list_insert (source_list, link_dest, link_weight);
}

void graph_remove_edge (graph_t *graph, int link_src, int vertex) {
	
	//get the adjacency list of the source
	adj_list_t *source_list = graph->adj_list + link_src;

	//delete vertex from the source list
	adj_list_remove (source_list, link_src, vertex);
}

int distance (int link_src, int link_dest) {
	int link_src_x = drand48();
	int link_dest_x = drand48();
	int link_src_y = drand48();
	int link_dest_y = drand48();
	return sqrt(pow(link_src_x-link_dest_x,2) + 
		pow(link_src_y-link_dest_y,2));
}

int weight (int link_src, int link_dest) {
	int weight = 0;
	if (link_src == link_dest)
		weight = 0;
	else if (GraphType == 2) {
		weight = abs(link_src-link_dest) + pow(link_src
				-link_dest+2, 2) + 3*link_dest;
	}
	else {
		int C = sqrt(AdjVertices/(NumVertices * M_PI)); //Radius of Circle
		int D = distance(link_src, link_dest);
		if (D <= C/2)
			weight = 1;
		else if (C/2 < D && D <= 3*C/4)
			weight = 2;
		else if (3*C/4 < D && D <= C)
			weight = 4;
		else
			weight = INT_MAX;
	}
	return weight;
}

void graph_debug_print (graph_t *G) {
	int i;
	for (i = 0; i < G->NumVertices; i++) {
		printf("\nNode #%d has links:\n", i);
		graph_debug_print_aux(G->adj_list[i].head, i);
		printf("\n\n");
	}
}

void graph_debug_print_aux (adj_list_node_t *N, int source) {
	if (N == NULL) return;
	graph_debug_print_aux(N->next, source);
	printf("\n%d --> %d with weight %d", source, N->vertex, N->weight);
}

int min_distance (int dest, int dist_to_dest) {
	if (dist_to_dest < dest) return dest;
	else return 0;
}

void print_path (int num_vert_in_path, int link_src, int link_dest, int Distance[], int Path[]) {
	int i;
	for (i = num_vert_in_path; i >=1; i--) 
		printf(" %d -->", Path[i]);
	printf(" %d\n", Path[0]);
}

int num_vertices_in_path (int Path[], int link_src, int link_dest) {
	int m, num_vertices = 1;
	m = link_dest;
	do {
		m = Path[m];
		num_vertices++;
	} while(m != link_src);
	return num_vertices;
}

void store_best_path (int Path[], int link_src, int link_dest, int *best_path) {
	int n = 1, m;
	m = link_dest;
	best_path[0] = link_dest;
	do {
		best_path[n] = Path[m];
		m = Path[m];
		n++;
	} while(m != link_src);
}

void dijkstra (graph_t *graph, int link_src, int link_dest) {
	int *Distance = (int *) malloc(graph->NumVertices * sizeof(int)); 
	int *Path = (int *) malloc(graph->NumVertices * sizeof(int));
	graph_shortest_path (graph, link_src, link_dest, Distance, Path);
	if (Distance[link_dest] == INT_MAX) 
		printf("\nNo path exists from %d to %d.\n\n", link_src, link_dest);
	else { 
		printf("\nShortest Path from %d to %d: ", link_src, link_dest);
		int num_vertices = num_vertices_in_path (Path, link_src, link_dest);
		int *ShortestPath = (int *) malloc(num_vertices * sizeof(int));
		store_best_path(Path, link_src, link_dest, ShortestPath);
		print_path(num_vertices-1, link_src, link_dest, Distance, ShortestPath);
		printf("Cost of the Path: %d\n\n", Distance[link_dest]);
		free(ShortestPath);	
	}
	free(Distance);
	free(Path);
}	

void graph_network_diameter (graph_t *graph) {
	int *Distance = (int *) malloc(graph->NumVertices * sizeof(int)); 
	int *Path = (int *) malloc(graph->NumVertices * sizeof(int));
	int i, j, max_diam = INT_MIN, link_src, link_dest, num_vertices;
	int *MaxDiamPath = NULL;
	for (i = 0; i < graph->NumVertices; i++) {
		graph_shortest_path (graph, i, i, Distance, Path);
		for (j = 0; j < graph->NumVertices; j++) {
			if (Distance[j] != INT_MAX && Distance[j] > max_diam) {
				max_diam = Distance[j];
				link_src = i;
				link_dest = j;
				//get size of the path	
				num_vertices = num_vertices_in_path (Path, link_src, link_dest);
				if (MaxDiamPath != NULL) free(MaxDiamPath);				
				MaxDiamPath = (int *) malloc(num_vertices * sizeof(int));
				store_best_path (Path, link_src, link_dest, MaxDiamPath);
			}
		}
	}
	printf("\nNetwork Diameter of the Graph: %d\nPath: ", max_diam);
	print_path(num_vertices-1, link_src, link_dest, Distance, MaxDiamPath);
	printf("\n");
	free(Distance);
	free(Path);
	free(MaxDiamPath);
}

void graph_multiple_paths (graph_t *graph, int link_src, int link_dest) {
	int *Distance = (int *) malloc(graph->NumVertices * sizeof(int)); 
	int *Path = (int *) malloc(graph->NumVertices * sizeof(int));	
	int num_vertices = 0, i;
	adj_list_node_t *node = graph->adj_list[link_src].head;
	printf("\nMultiple Link-Disjoint Paths From %d to %d:\n\n", link_src, link_dest);
	for (i = 0; i < graph->NumVertices; i++) {
		graph_shortest_path (graph, link_src, link_dest, Distance, Path);
		num_vertices = num_vertices_in_path (Path, link_src, link_dest);
		if (Distance[link_dest] == INT_MAX)  {
			printf("No other path exists.\n\n");
			break;
		}
		else { 
			printf("Link-Disjoint Path %d: ", i+1);
			int *ShortestPath = (int *) malloc(num_vertices * sizeof(int));
			store_best_path(Path, link_src, link_dest, ShortestPath);
			print_path(num_vertices-1, link_src, link_dest, Distance, ShortestPath);
			printf("Cost of the Path: %d\n\n", Distance[link_dest]);
			node = graph->adj_list[link_src].head;
			while (node != NULL) {
				if (node->vertex == Path[num_vertices-1]) break;
				node = node->next;
			}
			graph_remove_edge (graph, link_src, node->vertex);
			free(ShortestPath);
		}
	} 
}

void graph_shortest_path (graph_t *graph, int link_src, int link_dest, int Distance[], int Path[]) {

	adj_list_node_t *node = NULL;
	int i, CurrDistance, vertex, ConfSize = 0, SmallerDistance;
	int *ConfirmVert = (int *) malloc(graph->NumVertices * sizeof(int)); //holds vertices that have found shortest dist
	for (i = 0; i < graph->NumVertices; i++) {
		ConfirmVert[i] = FALSE; //initialize vertices as not confirmed
		Distance[i] = INT_MAX; //initalize distances as infinity
		Path[i] = link_src;
	}
	Distance[link_src] = 0; //initialize source distance as 0
	
	//find shortest path 
	while (ConfSize != graph->NumVertices) {
		//get next smallest value 
		CurrDistance = INT_MAX;
		for (i = 0; i < graph->NumVertices; i++) {
			if (!ConfirmVert[i] && Distance[i] < CurrDistance) {
				CurrDistance = Distance[i];
				vertex = i;
			}
		}
		//add vertex to confirmed vertices array
		ConfirmVert[vertex] = TRUE;
		ConfSize++;
		//update distances from current vertex
		node = graph->adj_list[vertex].head;
		while (node != NULL) {
			SmallerDistance = min_distance (Distance[node->vertex], CurrDistance + node->weight);
			if (!ConfirmVert[node->vertex] && SmallerDistance) {
					Distance[node->vertex] = CurrDistance + node->weight;
					Path[node->vertex] = vertex;
			}
			node = node->next;
		}
	}
	free(ConfirmVert);
}

